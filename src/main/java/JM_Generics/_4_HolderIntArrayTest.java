package JM_Generics;

import java.util.Arrays;

/**
 * Тест для старого способа хранения массива интов в холдере
 * общего назначения для всех типов объектов.
 */

public class _4_HolderIntArrayTest {
    public static void main(String[] args) {
        _2_ObjectHolder holder = new _2_ObjectHolder();
        _2_ObjectHolder holder2 = new _2_ObjectHolder();
        /*
        Создали новый универсальный "склад" (холдер), который
        хранит любые контейнеры типа Object, которые могут
        хранить массив интов, Стринг, Дабл и т.д.

        Этот холдер небезопасен с точки зрения типов, он все хранит
        и говорит: "Я всё привожу к общему типу и я забываю, что
        там лежит. А ты, программист, сам помни, какой именно тип
        данных ты туда положил."
        */
        System.out.println(holder.equals(holder2));

        holder.setData(new int[]{10,20,30});
        /*
        Здесь компилятор
        принял на "склад" (холдер) массив интов, и жаль, что он
        сделал это безоговорочно, не спросив нас, какой
        конкретно это тип объекта (массив интов, Стринг, Дабл...)
         */


        // int[] arr = holder.getData();
        /*
        Так работать не будет, потому что доставая из "склада"
        (холдера) объектов нужно произвести приведение типов, то
        есть сказать компилятору, что мы достаем конкретно массив
        интов, а не что-то другое. Компилятор сам не берет на себя
        ответственность самостоятельно делать приведение типов, он
        не уверен, что именно мы туда положили.
         */


        int[] arr = (int[]) holder.getData();
        /*
        Теперь заработает, так как мы делаем приведение типов.
        Мы же помним, что клали массив интов, вот и привобим хранящийся
        контейнер к массиву интов.
         */

        System.out.println(Arrays.toString(arr));
    }
}
